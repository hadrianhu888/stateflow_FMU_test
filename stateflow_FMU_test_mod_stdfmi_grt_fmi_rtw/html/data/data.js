var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"stateflow_FMU_test_mod_stdfmi","ref":false,"files":[{"name":"stateflow_FMU_test_mod_stdfmi.c","type":"source","group":"model","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi.c\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"stateflow_FMU_test_mod_stdfmi_capi.h\"\r\n#include \"stateflow_FMU_test_mod_stdfmi.h\"\r\n#include \"stateflow_FMU_test_mod_stdfmi_private.h\"\r\n\r\n/* Named constants for Chart: '<Root>/State Flow FMU Test' */\r\n#define stateflow_FMU_test_mod_IN_delay ((uint8_T)1U)\r\n#define stateflow_FMU_test_mod_IN_queue ((uint8_T)4U)\r\n#define stateflow_FMU_test_mod_IN_start ((uint8_T)5U)\r\n#define stateflow_FMU_test_mod__IN_wait ((uint8_T)6U)\r\n#define stateflow_FMU_test_mod_s_IN_off ((uint8_T)2U)\r\n#define stateflow_FMU_test_mod_st_IN_on ((uint8_T)3U)\r\n#define stateflow_FM_IN_NO_ACTIVE_CHILD ((uint8_T)0U)\r\n\r\n/* Block states (default storage) */\r\nDW_stateflow_FMU_test_mod_std_T stateflow_FMU_test_mod_stdfm_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU_stateflow_FMU_test_mod_s_T stateflow_FMU_test_mod_stdfmi_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY_stateflow_FMU_test_mod_s_T stateflow_FMU_test_mod_stdfmi_Y;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_stateflow_FMU_test_m_T stateflow_FMU_test_mod_stdfm_M_;\r\nRT_MODEL_stateflow_FMU_test_m_T *const stateflow_FMU_test_mod_stdfm_M =\r\n  &stateflow_FMU_test_mod_stdfm_M_;\r\n\r\n/* Model step function */\r\nvoid stateflow_FMU_test_mod_stdfmi_step(void)\r\n{\r\n  /* Chart: '<Root>/State Flow FMU Test' incorporates:\r\n   *  Inport: '<Root>/delayCode'\r\n   *  Inport: '<Root>/offCode'\r\n   *  Inport: '<Root>/onCode'\r\n   *  Inport: '<Root>/queueCode'\r\n   *  Inport: '<Root>/startCode'\r\n   *  Inport: '<Root>/waitCode'\r\n   */\r\n  /* Gateway: State Flow FMU Test */\r\n  /* During: State Flow FMU Test */\r\n  if (stateflow_FMU_test_mod_stdfm_DW.is_active_c3_stateflow_FMU_test == 0U) {\r\n    /* Entry: State Flow FMU Test */\r\n    stateflow_FMU_test_mod_stdfm_DW.is_active_c3_stateflow_FMU_test = 1U;\r\n\r\n    /* Entry Internal: State Flow FMU Test */\r\n    /* Transition: '<S1>:2' */\r\n    stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n      stateflow_FMU_test_mod_IN_start;\r\n\r\n    /* Outport: '<Root>/startState' */\r\n    /* Entry 'start': '<S1>:1' */\r\n    stateflow_FMU_test_mod_stdfmi_Y.startState = 1.0;\r\n\r\n    /* Outport: '<Root>/delayState' */\r\n    stateflow_FMU_test_mod_stdfmi_Y.delayState = 1.0;\r\n  } else {\r\n    switch (stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st) {\r\n     case stateflow_FMU_test_mod_IN_delay:\r\n      /* During 'delay': '<S1>:6' */\r\n      if (stateflow_FMU_test_mod_stdfmi_U.delayCode == 0.0) {\r\n        /* Transition: '<S1>:16' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod__IN_wait;\r\n\r\n        /* Outport: '<Root>/waitState' */\r\n        /* Entry 'wait': '<S1>:5' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.waitState = 1.0;\r\n      } else if (stateflow_FMU_test_mod_stdfmi_U.queueCode == 1.0) {\r\n        /* Transition: '<S1>:18' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_IN_queue;\r\n\r\n        /* Entry 'queue': '<S1>:7' */\r\n      }\r\n      break;\r\n\r\n     case stateflow_FMU_test_mod_s_IN_off:\r\n      /* During 'off': '<S1>:4' */\r\n      if ((stateflow_FMU_test_mod_stdfmi_U.startCode == 0.0) &&\r\n          (stateflow_FMU_test_mod_stdfmi_U.offCode == 0.0)) {\r\n        /* Transition: '<S1>:12' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_IN_start;\r\n\r\n        /* Outport: '<Root>/startState' */\r\n        /* Entry 'start': '<S1>:1' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.startState = 1.0;\r\n\r\n        /* Outport: '<Root>/delayState' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.delayState = 1.0;\r\n      } else if (stateflow_FMU_test_mod_stdfmi_U.onCode == 1.0) {\r\n        /* Transition: '<S1>:22' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_st_IN_on;\r\n\r\n        /* Outport: '<Root>/onState' */\r\n        /* Entry 'on': '<S1>:3' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.onState = 1.0;\r\n      }\r\n      break;\r\n\r\n     case stateflow_FMU_test_mod_st_IN_on:\r\n      /* During 'on': '<S1>:3' */\r\n      if ((stateflow_FMU_test_mod_stdfmi_U.waitCode == 1.0) &&\r\n          (stateflow_FMU_test_mod_stdfmi_U.onCode == 1.0)) {\r\n        /* Transition: '<S1>:10' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod__IN_wait;\r\n\r\n        /* Outport: '<Root>/waitState' */\r\n        /* Entry 'wait': '<S1>:5' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.waitState = 1.0;\r\n      } else if (stateflow_FMU_test_mod_stdfmi_U.offCode == 1.0) {\r\n        /* Transition: '<S1>:21' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_s_IN_off;\r\n\r\n        /* Entry 'off': '<S1>:4' */\r\n      } else {\r\n        /* Outport: '<Root>/onState' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.onState = 1.0;\r\n      }\r\n      break;\r\n\r\n     case stateflow_FMU_test_mod_IN_queue:\r\n      /* During 'queue': '<S1>:7' */\r\n      if (stateflow_FMU_test_mod_stdfmi_U.queueCode == 1.0) {\r\n        /* Transition: '<S1>:19' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_IN_delay;\r\n\r\n        /* Entry 'delay': '<S1>:6' */\r\n      } else if (stateflow_FMU_test_mod_stdfmi_U.offCode == 1.0) {\r\n        /* Transition: '<S1>:23' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_s_IN_off;\r\n\r\n        /* Entry 'off': '<S1>:4' */\r\n      }\r\n      break;\r\n\r\n     case stateflow_FMU_test_mod_IN_start:\r\n      /* During 'start': '<S1>:1' */\r\n      if ((stateflow_FMU_test_mod_stdfmi_U.startCode == 1.0) &&\r\n          (stateflow_FMU_test_mod_stdfmi_U.onCode == 1.0)) {\r\n        /* Transition: '<S1>:8' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_st_IN_on;\r\n\r\n        /* Outport: '<Root>/onState' */\r\n        /* Entry 'on': '<S1>:3' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.onState = 1.0;\r\n      } else if ((stateflow_FMU_test_mod_stdfmi_U.offCode == 1.0) &&\r\n                 (stateflow_FMU_test_mod_stdfmi_U.startCode == 0.0)) {\r\n        /* Transition: '<S1>:17' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_s_IN_off;\r\n\r\n        /* Entry 'off': '<S1>:4' */\r\n      } else {\r\n        /* Outport: '<Root>/startState' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.startState = 1.0;\r\n\r\n        /* Outport: '<Root>/delayState' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.delayState = 1.0;\r\n      }\r\n      break;\r\n\r\n     default:\r\n      /* During 'wait': '<S1>:5' */\r\n      if ((stateflow_FMU_test_mod_stdfmi_U.waitCode == 1.0) &&\r\n          (stateflow_FMU_test_mod_stdfmi_U.onCode == 0.0)) {\r\n        /* Transition: '<S1>:11' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_st_IN_on;\r\n\r\n        /* Outport: '<Root>/onState' */\r\n        /* Entry 'on': '<S1>:3' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.onState = 1.0;\r\n      } else if (stateflow_FMU_test_mod_stdfmi_U.delayCode == 1.0) {\r\n        /* Transition: '<S1>:13' */\r\n        stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n          stateflow_FMU_test_mod_IN_delay;\r\n\r\n        /* Entry 'delay': '<S1>:6' */\r\n      } else {\r\n        /* Outport: '<Root>/waitState' */\r\n        stateflow_FMU_test_mod_stdfmi_Y.waitState = 1.0;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /* End of Chart: '<Root>/State Flow FMU Test' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid stateflow_FMU_test_mod_stdfmi_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)stateflow_FMU_test_mod_stdfm_M, 0,\r\n                sizeof(RT_MODEL_stateflow_FMU_test_m_T));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&stateflow_FMU_test_mod_stdfm_DW, 0,\r\n                sizeof(DW_stateflow_FMU_test_mod_std_T));\r\n\r\n  /* external inputs */\r\n  (void)memset(&stateflow_FMU_test_mod_stdfmi_U, 0, sizeof\r\n               (ExtU_stateflow_FMU_test_mod_s_T));\r\n\r\n  /* external outputs */\r\n  (void)memset(&stateflow_FMU_test_mod_stdfmi_Y, 0, sizeof\r\n               (ExtY_stateflow_FMU_test_mod_s_T));\r\n\r\n  /* Initialize DataMapInfo substructure containing ModelMap for C API */\r\n  stateflow_FMU_test_mod_stdfmi_InitializeDataMapInfo();\r\n\r\n  /* SystemInitialize for Chart: '<Root>/State Flow FMU Test' */\r\n  stateflow_FMU_test_mod_stdfm_DW.is_active_c3_stateflow_FMU_test = 0U;\r\n  stateflow_FMU_test_mod_stdfm_DW.is_c3_stateflow_FMU_test_mod_st =\r\n    stateflow_FM_IN_NO_ACTIVE_CHILD;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/waitState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.waitState = 0.0;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/onState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.onState = 0.0;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/offState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.offState = 0.0;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/delayState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.delayState = 0.0;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/queueState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.queueState = 0.0;\r\n\r\n  /* SystemInitialize for Outport: '<Root>/startState' incorporates:\r\n   *  Chart: '<Root>/State Flow FMU Test'\r\n   */\r\n  stateflow_FMU_test_mod_stdfmi_Y.startState = 0.0;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid stateflow_FMU_test_mod_stdfmi_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi.h","type":"header","group":"model","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_stateflow_FMU_test_mod_stdfmi_h_\r\n#define RTW_HEADER_stateflow_FMU_test_mod_stdfmi_h_\r\n#include <string.h>\r\n#include \"rtw_modelmap.h\"\r\n#ifndef stateflow_FMU_test_mod_stdfmi_COMMON_INCLUDES_\r\n#define stateflow_FMU_test_mod_stdfmi_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                      /* stateflow_FMU_test_mod_stdfmi_COMMON_INCLUDES_ */\r\n\r\n#include \"stateflow_FMU_test_mod_stdfmi_types.h\"\r\n\r\n/* Shared type includes */\r\n#include \"multiword_types.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetDataMapInfo\r\n#define rtmGetDataMapInfo(rtm)         ((rtm)->DataMapInfo)\r\n#endif\r\n\r\n#ifndef rtmSetDataMapInfo\r\n#define rtmSetDataMapInfo(rtm, val)    ((rtm)->DataMapInfo = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#define stateflow_FMU_test_mod_stdfmi_M (stateflow_FMU_test_mod_stdfm_M)\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  uint8_T is_active_c3_stateflow_FMU_test;/* '<Root>/State Flow FMU Test' */\r\n  uint8_T is_c3_stateflow_FMU_test_mod_st;/* '<Root>/State Flow FMU Test' */\r\n} DW_stateflow_FMU_test_mod_std_T;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  real_T delayCode;                    /* '<Root>/delayCode' */\r\n  real_T offCode;                      /* '<Root>/offCode' */\r\n  real_T onCode;                       /* '<Root>/onCode' */\r\n  real_T queueCode;                    /* '<Root>/queueCode' */\r\n  real_T waitCode;                     /* '<Root>/waitCode' */\r\n  real_T startCode;                    /* '<Root>/startCode' */\r\n} ExtU_stateflow_FMU_test_mod_s_T;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T waitState;                    /* '<Root>/waitState' */\r\n  real_T onState;                      /* '<Root>/onState' */\r\n  real_T offState;                     /* '<Root>/offState' */\r\n  real_T delayState;                   /* '<Root>/delayState' */\r\n  real_T queueState;                   /* '<Root>/queueState' */\r\n  real_T startState;                   /* '<Root>/startState' */\r\n} ExtY_stateflow_FMU_test_mod_s_T;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_stateflow_FMU_test_mo_T {\r\n  const char_T *errorStatus;\r\n\r\n  /*\r\n   * DataMapInfo:\r\n   * The following substructure contains information regarding\r\n   * structures generated in the model's C API.\r\n   */\r\n  struct {\r\n    rtwCAPI_ModelMappingInfo mmi;\r\n  } DataMapInfo;\r\n};\r\n\r\n/* Block states (default storage) */\r\nextern DW_stateflow_FMU_test_mod_std_T stateflow_FMU_test_mod_stdfm_DW;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU_stateflow_FMU_test_mod_s_T stateflow_FMU_test_mod_stdfmi_U;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY_stateflow_FMU_test_mod_s_T stateflow_FMU_test_mod_stdfmi_Y;\r\n\r\n/* Model entry point functions */\r\nextern void stateflow_FMU_test_mod_stdfmi_initialize(void);\r\nextern void stateflow_FMU_test_mod_stdfmi_step(void);\r\nextern void stateflow_FMU_test_mod_stdfmi_terminate(void);\r\n\r\n/* Function to get C API Model Mapping Static Info */\r\nextern const rtwCAPI_ModelMappingStaticInfo*\r\n  stateflow_FMU_test_mod_stdfmi_GetCAPIStaticMap(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_stateflow_FMU_test_m_T *const stateflow_FMU_test_mod_stdfm_M;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'stateflow_FMU_test_mod_stdfmi'\r\n * '<S1>'   : 'stateflow_FMU_test_mod_stdfmi/State Flow FMU Test'\r\n */\r\n#endif                         /* RTW_HEADER_stateflow_FMU_test_mod_stdfmi_h_ */\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi_private.h","type":"header","group":"model","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi_private.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_stateflow_FMU_test_mod_stdfmi_private_h_\r\n#define RTW_HEADER_stateflow_FMU_test_mod_stdfmi_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"builtin_typeid_types.h\"\r\n#include \"multiword_types.h\"\r\n#endif                 /* RTW_HEADER_stateflow_FMU_test_mod_stdfmi_private_h_ */\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi_types.h","type":"header","group":"model","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi_types.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_stateflow_FMU_test_mod_stdfmi_types_h_\r\n#define RTW_HEADER_stateflow_FMU_test_mod_stdfmi_types_h_\r\n\r\n/* Model Code Variants */\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_stateflow_FMU_test_mo_T RT_MODEL_stateflow_FMU_test_m_T;\r\n\r\n#endif                   /* RTW_HEADER_stateflow_FMU_test_mod_stdfmi_types_h_ */\r\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * builtin_typeid_types.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef BUILTIN_TYPEID_TYPES_H\r\n#define BUILTIN_TYPEID_TYPES_H\r\n#include \"rtwtypes.h\"\r\n#ifndef BUILTIN_TYPEID_TYPES\r\n#define BUILTIN_TYPEID_TYPES\r\n\r\n/* Enumeration of built-in data types */\r\ntypedef enum {\r\n  SS_DOUBLE = 0,                       /* real_T    */\r\n  SS_SINGLE = 1,                       /* real32_T  */\r\n  SS_INT8 = 2,                         /* int8_T    */\r\n  SS_UINT8 = 3,                        /* uint8_T   */\r\n  SS_INT16 = 4,                        /* int16_T   */\r\n  SS_UINT16 = 5,                       /* uint16_T  */\r\n  SS_INT32 = 6,                        /* int32_T   */\r\n  SS_UINT32 = 7,                       /* uint32_T  */\r\n  SS_BOOLEAN = 8                       /* boolean_T */\r\n} BuiltInDTypeId;\r\n\r\n#define SS_NUM_BUILT_IN_DTYPE          ((int_T)SS_BOOLEAN+1)\r\n\r\n/* Enumeration for MAT-file logging code */\r\ntypedef int_T DTypeId;\r\n\r\n#endif                                 /* BUILTIN_TYPEID_TYPES */\r\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long long longlong_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n#ifndef INT64_T\r\n#define INT64_T\r\n\r\ntypedef long long int64_T;\r\n\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#endif\r\n\r\n#ifndef UINT64_T\r\n#define UINT64_T\r\n\r\ntypedef unsigned long long uint64_T;\r\n\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n#endif\r\n\r\n/*===========================================================================*\r\n * Additional complex number type definitions                                           *\r\n *===========================================================================*/\r\n#ifndef CINT64_T\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#endif\r\n\r\n#ifndef CUINT64_T\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n\r\n/*\r\n *  Includes the appropriate headers when we are using rtModel\r\n */\r\n#include \"stateflow_FMU_test_mod_stdfmi.h\"\r\n#define GRTINTERFACE                   0\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi_capi.c","type":"source","group":"interface","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi_capi.c\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtw_capi.h\"\r\n#ifdef HOST_CAPI_BUILD\r\n#include \"stateflow_FMU_test_mod_stdfmi_capi_host.h\"\r\n#define sizeof(s)                      ((size_t)(0xFFFF))\r\n#undef rt_offsetof\r\n#define rt_offsetof(s,el)              ((uint16_T)(0xFFFF))\r\n#define TARGET_CONST\r\n#define TARGET_STRING(s)               (s)\r\n#else                                  /* HOST_CAPI_BUILD */\r\n#include \"builtin_typeid_types.h\"\r\n#include \"stateflow_FMU_test_mod_stdfmi.h\"\r\n#include \"stateflow_FMU_test_mod_stdfmi_capi.h\"\r\n#include \"stateflow_FMU_test_mod_stdfmi_private.h\"\r\n#ifdef LIGHT_WEIGHT_CAPI\r\n#define TARGET_CONST\r\n#define TARGET_STRING(s)               ((NULL))\r\n#else\r\n#define TARGET_CONST                   const\r\n#define TARGET_STRING(s)               (s)\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n\r\n/* Block output signal information */\r\nstatic const rtwCAPI_Signals rtBlockSignals[] = {\r\n  /* addrMapIndex, sysNum, blockPath,\r\n   * signalName, portNumber, dataTypeIndex, dimIndex, fxpIndex, sTimeIndex\r\n   */\r\n  {\r\n    0, 0, (NULL), (NULL), 0, 0, 0, 0, 0\r\n  }\r\n};\r\n\r\nstatic const rtwCAPI_BlockParameters rtBlockParameters[] = {\r\n  /* addrMapIndex, blockPath,\r\n   * paramName, dataTypeIndex, dimIndex, fixPtIdx\r\n   */\r\n  {\r\n    0, (NULL), (NULL), 0, 0, 0\r\n  }\r\n};\r\n\r\n/* Block states information */\r\nstatic const rtwCAPI_States rtBlockStates[] = {\r\n  /* addrMapIndex, contStateStartIndex, blockPath,\r\n   * stateName, pathAlias, dWorkIndex, dataTypeIndex, dimIndex,\r\n   * fixPtIdx, sTimeIndex, isContinuous, hierInfoIdx, flatElemIdx\r\n   */\r\n  {\r\n    0, -1, (NULL), (NULL), (NULL), 0, 0, 0, 0, 0, 0, -1, 0\r\n  }\r\n};\r\n\r\n/* Root Inputs information */\r\nstatic const rtwCAPI_Signals rtRootInputs[] = {\r\n  /* addrMapIndex, sysNum, blockPath,\r\n   * signalName, portNumber, dataTypeIndex, dimIndex, fxpIndex, sTimeIndex\r\n   */\r\n  { 0, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/delayCode\"),\r\n    TARGET_STRING(\"\"), 1, 0, 0, 0, 0 },\r\n\r\n  { 1, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/offCode\"),\r\n    TARGET_STRING(\"\"), 2, 0, 0, 0, 0 },\r\n\r\n  { 2, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/onCode\"),\r\n    TARGET_STRING(\"\"), 3, 0, 0, 0, 0 },\r\n\r\n  { 3, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/queueCode\"),\r\n    TARGET_STRING(\"\"), 4, 0, 0, 0, 0 },\r\n\r\n  { 4, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/waitCode\"),\r\n    TARGET_STRING(\"\"), 5, 0, 0, 0, 0 },\r\n\r\n  { 5, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/startCode\"),\r\n    TARGET_STRING(\"\"), 6, 0, 0, 0, 0 },\r\n\r\n  {\r\n    0, 0, (NULL), (NULL), 0, 0, 0, 0, 0\r\n  }\r\n};\r\n\r\n/* Root Outputs information */\r\nstatic const rtwCAPI_Signals rtRootOutputs[] = {\r\n  /* addrMapIndex, sysNum, blockPath,\r\n   * signalName, portNumber, dataTypeIndex, dimIndex, fxpIndex, sTimeIndex\r\n   */\r\n  { 6, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/waitState\"),\r\n    TARGET_STRING(\"\"), 1, 0, 0, 0, 0 },\r\n\r\n  { 7, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/onState\"),\r\n    TARGET_STRING(\"\"), 2, 0, 0, 0, 0 },\r\n\r\n  { 8, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/offState\"),\r\n    TARGET_STRING(\"\"), 3, 0, 0, 0, 0 },\r\n\r\n  { 9, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/delayState\"),\r\n    TARGET_STRING(\"\"), 4, 0, 0, 0, 0 },\r\n\r\n  { 10, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/queueState\"),\r\n    TARGET_STRING(\"\"), 5, 0, 0, 0, 0 },\r\n\r\n  { 11, 0, TARGET_STRING(\"stateflow_FMU_test_mod_stdfmi/startState\"),\r\n    TARGET_STRING(\"\"), 6, 0, 0, 0, 0 },\r\n\r\n  {\r\n    0, 0, (NULL), (NULL), 0, 0, 0, 0, 0\r\n  }\r\n};\r\n\r\n/* Tunable variable parameters */\r\nstatic const rtwCAPI_ModelParameters rtModelParameters[] = {\r\n  /* addrMapIndex, varName, dataTypeIndex, dimIndex, fixPtIndex */\r\n  { 0, (NULL), 0, 0, 0 }\r\n};\r\n\r\n#ifndef HOST_CAPI_BUILD\r\n\r\n/* Declare Data Addresses statically */\r\nstatic void* rtDataAddrMap[] = {\r\n  &stateflow_FMU_test_mod_stdfmi_U.delayCode,/* 0: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_U.offCode,/* 1: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_U.onCode,/* 2: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_U.queueCode,/* 3: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_U.waitCode,/* 4: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_U.startCode,/* 5: Root Input */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.waitState,/* 6: Root Output */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.onState,/* 7: Root Output */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.offState,/* 8: Root Output */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.delayState,/* 9: Root Output */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.queueState,/* 10: Root Output */\r\n  &stateflow_FMU_test_mod_stdfmi_Y.startState,/* 11: Root Output */\r\n};\r\n\r\n/* Declare Data Run-Time Dimension Buffer Addresses statically */\r\nstatic int32_T* rtVarDimsAddrMap[] = {\r\n  (NULL)\r\n};\r\n\r\n#endif\r\n\r\n/* Data Type Map - use dataTypeMapIndex to access this structure */\r\nstatic TARGET_CONST rtwCAPI_DataTypeMap rtDataTypeMap[] = {\r\n  /* cName, mwName, numElements, elemMapIndex, dataSize, slDataId, *\r\n   * isComplex, isPointer, enumStorageType */\r\n  { \"double\", \"real_T\", 0, 0, sizeof(real_T), (uint8_T)SS_DOUBLE, 0, 0, 0 }\r\n};\r\n\r\n#ifdef HOST_CAPI_BUILD\r\n#undef sizeof\r\n#endif\r\n\r\n/* Structure Element Map - use elemMapIndex to access this structure */\r\nstatic TARGET_CONST rtwCAPI_ElementMap rtElementMap[] = {\r\n  /* elementName, elementOffset, dataTypeIndex, dimIndex, fxpIndex */\r\n  { (NULL), 0, 0, 0, 0 },\r\n};\r\n\r\n/* Dimension Map - use dimensionMapIndex to access elements of ths structure*/\r\nstatic const rtwCAPI_DimensionMap rtDimensionMap[] = {\r\n  /* dataOrientation, dimArrayIndex, numDims, vardimsIndex */\r\n  { rtwCAPI_SCALAR, 0, 2, 0 }\r\n};\r\n\r\n/* Dimension Array- use dimArrayIndex to access elements of this array */\r\nstatic const uint_T rtDimensionArray[] = {\r\n  1,                                   /* 0 */\r\n  1                                    /* 1 */\r\n};\r\n\r\n/* C-API stores floating point values in an array. The elements of this  *\r\n * are unique. This ensures that values which are shared across the model*\r\n * are stored in the most efficient way. These values are referenced by  *\r\n *           - rtwCAPI_FixPtMap.fracSlopePtr,                            *\r\n *           - rtwCAPI_FixPtMap.biasPtr,                                 *\r\n *           - rtwCAPI_SampleTimeMap.samplePeriodPtr,                    *\r\n *           - rtwCAPI_SampleTimeMap.sampleOffsetPtr                     */\r\nstatic const real_T rtcapiStoredFloats[] = {\r\n  0.1, 0.0\r\n};\r\n\r\n/* Fixed Point Map */\r\nstatic const rtwCAPI_FixPtMap rtFixPtMap[] = {\r\n  /* fracSlopePtr, biasPtr, scaleType, wordLength, exponent, isSigned */\r\n  { (NULL), (NULL), rtwCAPI_FIX_RESERVED, 0, 0, (boolean_T)0 },\r\n};\r\n\r\n/* Sample Time Map - use sTimeIndex to access elements of ths structure */\r\nstatic const rtwCAPI_SampleTimeMap rtSampleTimeMap[] = {\r\n  /* samplePeriodPtr, sampleOffsetPtr, tid, samplingMode */\r\n  { (const void *) &rtcapiStoredFloats[0], (const void *) &rtcapiStoredFloats[1],\r\n    (int8_T)0, (uint8_T)0 }\r\n};\r\n\r\nstatic rtwCAPI_ModelMappingStaticInfo mmiStatic = {\r\n  /* Signals:{signals, numSignals,\r\n   *           rootInputs, numRootInputs,\r\n   *           rootOutputs, numRootOutputs},\r\n   * Params: {blockParameters, numBlockParameters,\r\n   *          modelParameters, numModelParameters},\r\n   * States: {states, numStates},\r\n   * Maps:   {dataTypeMap, dimensionMap, fixPtMap,\r\n   *          elementMap, sampleTimeMap, dimensionArray},\r\n   * TargetType: targetType\r\n   */\r\n  { rtBlockSignals, 0,\r\n    rtRootInputs, 6,\r\n    rtRootOutputs, 6 },\r\n\r\n  { rtBlockParameters, 0,\r\n    rtModelParameters, 0 },\r\n\r\n  { rtBlockStates, 0 },\r\n\r\n  { rtDataTypeMap, rtDimensionMap, rtFixPtMap,\r\n    rtElementMap, rtSampleTimeMap, rtDimensionArray },\r\n  \"float\",\r\n\r\n  { 720414726U,\r\n    924212110U,\r\n    782294043U,\r\n    3003851427U },\r\n  (NULL), 0,\r\n  (boolean_T)0\r\n};\r\n\r\n/* Function to get C API Model Mapping Static Info */\r\nconst rtwCAPI_ModelMappingStaticInfo*\r\n  stateflow_FMU_test_mod_stdfmi_GetCAPIStaticMap(void)\r\n{\r\n  return &mmiStatic;\r\n}\r\n\r\n/* Cache pointers into DataMapInfo substructure of RTModel */\r\n#ifndef HOST_CAPI_BUILD\r\n\r\nvoid stateflow_FMU_test_mod_stdfmi_InitializeDataMapInfo(void)\r\n{\r\n  /* Set C-API version */\r\n  rtwCAPI_SetVersion(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi, 1);\r\n\r\n  /* Cache static C-API data into the Real-time Model Data structure */\r\n  rtwCAPI_SetStaticMap(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n                       &mmiStatic);\r\n\r\n  /* Cache static C-API logging data into the Real-time Model Data structure */\r\n  rtwCAPI_SetLoggingStaticMap(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n    (NULL));\r\n\r\n  /* Cache C-API Data Addresses into the Real-Time Model Data structure */\r\n  rtwCAPI_SetDataAddressMap(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n    rtDataAddrMap);\r\n\r\n  /* Cache C-API Data Run-Time Dimension Buffer Addresses into the Real-Time Model Data structure */\r\n  rtwCAPI_SetVarDimsAddressMap(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n    rtVarDimsAddrMap);\r\n\r\n  /* Cache the instance C-API logging pointer */\r\n  rtwCAPI_SetInstanceLoggingInfo(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n    (NULL));\r\n\r\n  /* Set reference to submodels */\r\n  rtwCAPI_SetChildMMIArray(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi,\r\n    (NULL));\r\n  rtwCAPI_SetChildMMIArrayLen(stateflow_FMU_test_mod_stdfm_M->DataMapInfo.mmi, 0);\r\n}\r\n\r\n#else                                  /* HOST_CAPI_BUILD */\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n  void stateflow_FMU_test_mod_stdfmi_host_InitializeDataMapInfo\r\n    (stateflow_FMU_test_mod_stdfmi_host_DataMapInfo_T *dataMap, const char *path)\r\n  {\r\n    /* Set C-API version */\r\n    rtwCAPI_SetVersion(dataMap->mmi, 1);\r\n\r\n    /* Cache static C-API data into the Real-time Model Data structure */\r\n    rtwCAPI_SetStaticMap(dataMap->mmi, &mmiStatic);\r\n\r\n    /* host data address map is NULL */\r\n    rtwCAPI_SetDataAddressMap(dataMap->mmi, (NULL));\r\n\r\n    /* host vardims address map is NULL */\r\n    rtwCAPI_SetVarDimsAddressMap(dataMap->mmi, (NULL));\r\n\r\n    /* Set Instance specific path */\r\n    rtwCAPI_SetPath(dataMap->mmi, path);\r\n    rtwCAPI_SetFullPath(dataMap->mmi, (NULL));\r\n\r\n    /* Set reference to submodels */\r\n    rtwCAPI_SetChildMMIArray(dataMap->mmi, (NULL));\r\n    rtwCAPI_SetChildMMIArrayLen(dataMap->mmi, 0);\r\n  }\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n\r\n/* EOF: stateflow_FMU_test_mod_stdfmi_capi.c */\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi_capi.h","type":"header","group":"interface","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * stateflow_FMU_test_mod_stdfmi_capi.h\r\n *\r\n * Code generation for model \"stateflow_FMU_test_mod_stdfmi\".\r\n *\r\n * Model version              : 1.6\r\n * Simulink Coder version : 9.6 (R2021b) 14-May-2021\r\n * C source code generated on : Wed Jun  1 19:12:21 2022\r\n *\r\n * Target selection: grtfmi.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_stateflow_FMU_test_mod_stdfmi_capi_h_\r\n#define RTW_HEADER_stateflow_FMU_test_mod_stdfmi_capi_h_\r\n#include \"stateflow_FMU_test_mod_stdfmi.h\"\r\n\r\nextern void stateflow_FMU_test_mod_stdfmi_InitializeDataMapInfo(void);\r\n\r\n#endif                    /* RTW_HEADER_stateflow_FMU_test_mod_stdfmi_capi_h_ */\r\n\r\n/* EOF: stateflow_FMU_test_mod_stdfmi_capi.h */\r\n"},{"name":"stateflow_FMU_test_mod_stdfmi_capi_host.h","type":"header","group":"other","path":"F:\\GitHubRepos\\stateflow_FMU_test\\stateflow_FMU_test_mod_stdfmi_grt_fmi_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef RTW_HEADER_stateflow_FMU_test_mod_stdfmi_cap_host_h__\r\n#define RTW_HEADER_stateflow_FMU_test_mod_stdfmi_cap_host_h__\r\n#ifdef HOST_CAPI_BUILD\r\n#include \"rtw_capi.h\"\r\n#include \"rtw_modelmap.h\"\r\n\r\ntypedef struct {\r\n  rtwCAPI_ModelMappingInfo mmi;\r\n} stateflow_FMU_test_mod_stdfmi_host_DataMapInfo_T;\r\n\r\n#ifdef __cplusplus\r\n\r\nextern \"C\" {\r\n\r\n#endif\r\n\r\n  void stateflow_FMU_test_mod_stdfmi_host_InitializeDataMapInfo\r\n    (stateflow_FMU_test_mod_stdfmi_host_DataMapInfo_T *dataMap, const char *path);\r\n\r\n#ifdef __cplusplus\r\n\r\n}\r\n#endif\r\n#endif                                 /* HOST_CAPI_BUILD */\r\n#endif               /* RTW_HEADER_stateflow_FMU_test_mod_stdfmi_cap_host_h__ */\r\n\r\n/* EOF: stateflow_FMU_test_mod_stdfmi_capi_host.h */\r\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};